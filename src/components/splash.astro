---
  import { Picture } from "@astrojs/image/components";
  import { Icon } from "astro-icon";
  import astronautImage from "~/assets/astronaut.png";
  import HeroImage from "~/components/hero-image.astro";
  import Starfield from "~/components/starfield.astro";
  import GitHubCorner from "./github-corner.astro";

  const widths = [450, 800];
  const sizes = "(min-width: 640px) 42vw, 67vw";
---

<section class="relative h-full bg-black px-16">
  <Starfield />
  <div id="splash-bg-fallback" class="absolute inset-0 hidden opacity-40">
    <HeroImage />
  </div>
  <div class="flex flex-row relative grid h-full place-items-center sm:grid-cols-2">
    <div class="flex flex-col gap-8">
      <h2 class="flex flex-col gap-2 self-end sm:gap-4 sm:self-auto sm:justify-self-end">
        <div class="gradient-text text-left font-extrabold tracking-tighter text-6xl">
          Ehi, non dovresti essere qui!
        </div>
      </h2>
      <p class="flex flex-col text-white gap-2 self-end sm:gap-4 sm:self-auto sm:justify-self-end">
        Ancora non abbiamo lanciato Solopreneur Booster, il primo servizio di AI Branding per Solopreneur.
        <br> Ma dato che sei qui, se ti interessa l'idea inserisci il tuo indirizzo email qui sotto e saprai quando
        lanceremo
        (e avrai una sorpresa).
      </p>
      <form id="emailForm" action="https://hook.eu1.make.com/gkq1rlryiimsgv27dcbi6vpd23yxqtjl" method="POST">
        <input class="text-black px-2" type="email" id="email" name="email">
        <button class="bg-white text-black px-2" type="submit" value="Aggiornatemi!">Aggiornatemi!</button>
      </form>
      <div id="confirmationMessage" style="display: none;">
        La tua richiesta è stata inviata con successo!
      </div>
    </div>
    <div id="astronaut" class="w-2/3 max-w-3xl self-start sm:w-10/12 sm:self-auto sm:justify-self-start">
      <Picture class="h-full w-full object-cover" src={astronautImage} widths={widths} sizes={sizes} loading="eager"
        alt="A floating astronaut in a space suit" />
    </div>
  </div>
</section>

<noscript>
  <style>
    #splash-bg-fallback {
      display: block;
    }
  </style>
</noscript>

<style>
  #subscribe_waiting {
    display: flex;
    flex-direction: row;
    width: 100%;
  }

  .sc-5dd7ce2b-3 {
    display: none !important;
  }

  @keyframes float {
    0% {
      transform: translate3d(0, 0, 0);
    }

    100% {
      transform: translate3d(0, 30px, 0);
    }
  }

  #astronaut {
    animation: float linear 2.5s infinite alternate;
  }

  @media (prefers-reduced-motion: reduce) {
    #astronaut {
      @apply animate-none;
    }

    :global(#starfield) {
      @apply hidden;
    }

    #splash-bg-fallback {
      @apply block;
    }
  }
</style>


{/* Rimozione pagina Accepted post-inserimento indirizzo email */}
<script>
  document.getElementById("emailForm").addEventListener("submit", function (event) {
    event.preventDefault(); // Impedisce l'invio del modulo

    var emailInput = document.getElementById("email");
    var email = emailInput.value;

    // Crea una nuova istanza di XMLHttpRequest
    var xhr = new XMLHttpRequest();

    // Configura la richiesta POST al tuo webhook Integromat
    xhr.open("POST", "https://hook.eu1.make.com/gkq1rlryiimsgv27dcbi6vpd23yxqtjl", true);
    xhr.setRequestHeader("Content-Type", "application/json");

    // Crea un oggetto JSON con l'indirizzo email
    var data = {
      email: email
    };

    // Converte l'oggetto JSON in una stringa
    var jsonData = JSON.stringify(data);

    // Definisci un gestore per l'evento "load" (richiesta completata con successo)
    xhr.addEventListener("load", function () {
      if (xhr.status === 200) {
        // La richiesta è stata completata con successo
        // Puoi gestire la risposta qui, ad esempio, mostrare il messaggio di conferma
        document.getElementById("emailForm").style.display = "none";
        document.getElementById("confirmationMessage").style.display = "block";
      } else {
        // La richiesta ha avuto un problema, puoi gestire gli errori qui
        console.error("Errore nella richiesta:", xhr.statusText);
      }
    });

    // Definisci un gestore per l'evento "error" (errore di rete durante la richiesta)
    xhr.addEventListener("error", function () {
      console.error("Errore di rete durante la richiesta.");
    });

    // Invia la richiesta con i dati JSON
    xhr.send(jsonData);
  });
</script>